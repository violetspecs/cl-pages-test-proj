"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var db_exports = {};
__export(db_exports, {
  PgDatabase: () => PgDatabase,
  withReplicas: () => withReplicas
});
module.exports = __toCommonJS(db_exports);
var import_entity = require("../entity.cjs");
var import_query_builders = require("./query-builders/index.cjs");
var import_subquery = require("../subquery.cjs");
var import_query = require("./query-builders/query.cjs");
var import_refresh_materialized_view = require("./query-builders/refresh-materialized-view.cjs");
var import_selection_proxy = require("../selection-proxy.cjs");
class PgDatabase {
  constructor(dialect, session, schema) {
    this.dialect = dialect;
    this.session = session;
    this._ = schema ? { schema: schema.schema, tableNamesMap: schema.tableNamesMap } : { schema: void 0, tableNamesMap: {} };
    this.query = {};
    if (this._.schema) {
      for (const [tableName, columns] of Object.entries(this._.schema)) {
        this.query[tableName] = new import_query.RelationalQueryBuilder(
          schema.fullSchema,
          this._.schema,
          this._.tableNamesMap,
          schema.fullSchema[tableName],
          columns,
          dialect,
          session
        );
      }
    }
  }
  static [import_entity.entityKind] = "PgDatabase";
  query;
  $with(alias) {
    return {
      as(qb) {
        if (typeof qb === "function") {
          qb = qb(new import_query_builders.QueryBuilder());
        }
        return new Proxy(
          new import_subquery.WithSubquery(qb.getSQL(), qb.getSelectedFields(), alias, true),
          new import_selection_proxy.SelectionProxyHandler({ alias, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
        );
      }
    };
  }
  with(...queries) {
    const self = this;
    function select(fields) {
      return new import_query_builders.PgSelectBuilder({
        fields: fields ?? void 0,
        session: self.session,
        dialect: self.dialect,
        withList: queries
      });
    }
    return { select };
  }
  select(fields) {
    return new import_query_builders.PgSelectBuilder({
      fields: fields ?? void 0,
      session: this.session,
      dialect: this.dialect
    });
  }
  selectDistinct(fields) {
    return new import_query_builders.PgSelectBuilder({
      fields: fields ?? void 0,
      session: this.session,
      dialect: this.dialect,
      distinct: true
    });
  }
  selectDistinctOn(on, fields) {
    return new import_query_builders.PgSelectBuilder({
      fields: fields ?? void 0,
      session: this.session,
      dialect: this.dialect,
      distinct: { on }
    });
  }
  update(table) {
    return new import_query_builders.PgUpdateBuilder(table, this.session, this.dialect);
  }
  insert(table) {
    return new import_query_builders.PgInsertBuilder(table, this.session, this.dialect);
  }
  delete(table) {
    return new import_query_builders.PgDeleteBase(table, this.session, this.dialect);
  }
  refreshMaterializedView(view) {
    return new import_refresh_materialized_view.PgRefreshMaterializedView(view, this.session, this.dialect);
  }
  execute(query) {
    return this.session.execute(query.getSQL());
  }
  transaction(transaction, config) {
    return this.session.transaction(transaction, config);
  }
}
const withReplicas = (primary, replicas, getReplica = () => replicas[Math.floor(Math.random() * replicas.length)]) => {
  const select = (...args) => getReplica(replicas).select(args);
  const selectDistinct = (...args) => getReplica(replicas).selectDistinct(args);
  const selectDistinctOn = (...args) => getReplica(replicas).selectDistinctOn(args);
  const $with = (...args) => getReplica(replicas).with(args);
  const update = (...args) => primary.update(args);
  const insert = (...args) => primary.insert(args);
  const $delete = (...args) => primary.delete(args);
  const execute = (...args) => primary.execute(args);
  const transaction = (...args) => primary.transaction(args);
  const refreshMaterializedView = (...args) => primary.refreshMaterializedView(args);
  return new Proxy(
    {
      ...primary,
      update,
      insert,
      delete: $delete,
      execute,
      transaction,
      refreshMaterializedView,
      $primary: primary,
      select,
      selectDistinct,
      selectDistinctOn,
      with: $with
    },
    {
      get(target, prop, _receiver) {
        if (prop === "query") {
          return getReplica(replicas).query;
        }
        return target[prop];
      }
    }
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PgDatabase,
  withReplicas
});
//# sourceMappingURL=db.cjs.map